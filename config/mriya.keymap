/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <200>;
};

&mt {
    quick_tap_ms = <200>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp ESCAPE        &kp Q  &kp W            &kp E             &kp R        &kp T              &kp Y        &kp U        &kp I             &kp O            &kp P     &kp BACKSLASH
  &mt TAB LEFT_ALT  &kp A  &kp S            &kp D             &kp F        &kp G              &kp H        &kp J        &kp K             &kp L            &kp SEMI  &mt RIGHT_ALT SQT
  &kp LEFT_CONTROL  &kp Z  &kp X            &kp C             &kp V        &kp B              &kp N        &kp M        &kp COMMA         &kp DOT          &kp FSLH  &mt RIGHT_CONTROL GRAVE
                           &kp RIGHT_SHIFT  &kp LEFT_COMMAND  &lt 1 ENTER  &lt 2 BACKSPACE    &lt 2 SPACE  &lt 1 ENTER  &kp LEFT_COMMAND  &kp RIGHT_SHIFT
            >;
        };

        lower_layer {
            bindings = <
  &kp ESCAPE        &kp NUMBER_1                  &kp NUMBER_2  &kp NUMBER_3      &kp NUMBER_4    &kp NUMBER_5        &kp NUMBER_6       &kp N7           &kp N8             &kp N9     &kp N0                               &trans
  &mt LEFT_ALT TAB  &mt LEFT_COMMAND EXCLAMATION  &kp AT        &kp HASH          &kp DLLR        &kp PRCNT           &kp CARET          &kp AMPS         &kp STAR           &kp LPAR   &mt RIGHT_COMMAND RIGHT_PARENTHESIS  &kp RIGHT_ALT
  &kp LEFT_CONTROL  &kp LEFT_SHIFT                &kp PLUS      &kp MINUS         &kp LEFT_BRACE  &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp EQUAL          &kp UNDER  &kp RIGHT_SHIFT                      &kp RIGHT_CONTROL
                                                  &kt CAPS      &kp LEFT_COMMAND  &trans          &lt 3 BACKSPACE     &kp SPACE          &trans           &kp RIGHT_COMMAND  &trans
            >;
        };

        raise_layer {
            bindings = <
  &kp LS(LG(LC(NUMBER_4)))  &trans  &kp PG_UP       &kp UP_ARROW      &kp PAGE_DOWN       &kp HOME               &kp HOME            &kp PG_UP            &kp UP_ARROW       &kp PAGE_DOWN    &trans  &kp RS(RG(NUMBER_4))
  &kp LEFT_ALT              &trans  &kp LEFT_ARROW  &kp DOWN_ARROW    &kp RIGHT_ARROW     &kp END                &kp END             &kp LEFT             &kp DOWN_ARROW     &kp RIGHT        &trans  &mt RIGHT_ALT RS(RG(N5))
  &kp LEFT_CONTROL          &trans  &trans          &trans            &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)    &kp RC(LEFT_ARROW)  &kp RC(RIGHT_ARROW)  &trans             &trans           &trans  &kp RIGHT_CONTROL
                                    &kp LEFT_SHIFT  &kp LEFT_COMMAND  &mo 3               &trans                 &trans              &mo 3                &kp RIGHT_COMMAND  &kp RIGHT_SHIFT
            >;
        };

        adjust_layer {
            bindings = <
  &bootloader  &none         &none         &none         &none         &none           &kp C_VOLUME_UP    &kp C_BRI_UP  &none   &none   &none   &bootloader
  &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_VOLUME_DOWN  &kp C_BRI_DN  &trans  &trans  &trans  &trans
  &sys_reset   &none         &none         &none         &none         &none           &none              &none         &none   &none   &none   &sys_reset
                             &none         &trans        &none         &trans          &trans             &none         &trans  &none
            >;
        };
    };
};
